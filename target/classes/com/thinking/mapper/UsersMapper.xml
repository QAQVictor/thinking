<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.thinking.mapper.UsersMapper">
	<resultMap id="BaseResultMap" type="com.thinking.bean.Users">
		<id column="UserID" property="userId" jdbcType="INTEGER" />
		<result column="UserName" property="userName" jdbcType="VARCHAR" />
		<result column="RealName" property="realName" jdbcType="VARCHAR" />
		<result column="Password" property="password" jdbcType="VARCHAR" />
		<result column="Gender" property="gender" jdbcType="VARCHAR" />
		<result column="Tel" property="tel" jdbcType="VARCHAR" />
		<result column="Email" property="email" jdbcType="VARCHAR" />
		<result column="CreateDate" property="createDate" jdbcType="TIMESTAMP" />
		<result column="LoginCount" property="loginCount" jdbcType="VARCHAR" />
		<result column="IsDeleted" property="isDeleted" jdbcType="VARCHAR" />
		<result column="CharacterType" property="characterType"
			jdbcType="INTEGER" />
		<result column="DepartID" property="departId" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Base_Column_List">
		UserID, UserName, RealName, Password, Gender, Tel, Email,
		CreateDate,
		LoginCount,
		IsDeleted, CharacterType, DepartID
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from users
		where UserID = #{userId}
	</select>
	<select id="selectByUserName" parameterType="com.thinking.bean.Users" resultType="com.thinking.bean.Users">
		select
		<include refid="Base_Column_List" />
		from users where UserName=#{userName} and Password=#{password}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from users
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from users
		where UserID = #{userId}
	</delete>
	<delete id="deleteByWhere" parameterType="java.util.List">
		delete from users
		where UserID in
		<foreach item="id" collection="list" separator="," open="("
			close=")">
			#{id}
		</foreach>
	</delete>
	<insert id="insert" parameterType="com.thinking.bean.Users">
		insert into users (UserID,
		UserName, RealName,
		Password, Gender, Tel,
		Email, CreateDate,
		LoginCount,
		IsDeleted, CharacterType, DepartID
		)
		values
		(#{userId},
		#{userName},
		#{realName},
		#{password},
		#{gender}, #{tel},
		#{email},
		#{createDate,jdbcType=TIMESTAMP},
		#{loginCount,jdbcType=VARCHAR},
		#{isDeleted,jdbcType=VARCHAR},
		#{characterType,jdbcType=INTEGER},
		#{departId,jdbcType=INTEGER}
		)
	</insert>

	<insert id="insertSelective" parameterType="com.thinking.bean.Users">
		insert into users
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="userid != null">
				UserID,
			</if>
			<if test="username != null">
				UserName,
			</if>
			<if test="realname != null">
				RealName,
			</if>
			<if test="password != null">
				Password,
			</if>
			<if test="gender != null">
				Gender,
			</if>
			<if test="tel != null">
				Tel,
			</if>
			<if test="email != null">
				Email,
			</if>
			<if test="createdate != null">
				CreateDate,
			</if>
			<if test="logincount != null">
				LoginCount,
			</if>
			<if test="isdeleted != null">
				IsDeleted,
			</if>
			<if test="charactertype != null">
				CharacterType,
			</if>
			<if test="departid != null">
				DepartID,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="userid != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="username != null">
				#{userName,jdbcType=VARCHAR},
			</if>
			<if test="realname != null">
				#{realName,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				#{gender,jdbcType=VARCHAR},
			</if>
			<if test="tel != null">
				#{tel,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				#{email,jdbcType=VARCHAR},
			</if>
			<if test="createdate != null">
				#{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="logincount != null">
				#{loginCount,jdbcType=VARCHAR},
			</if>
			<if test="isdeleted != null">
				#{isDeleted,jdbcType=VARCHAR},
			</if>
			<if test="charactertype != null">
				#{characterType,jdbcType=INTEGER},
			</if>
			<if test="departid != null">
				#{departId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>

	<update id="updateByPrimaryKeySelective" parameterType="com.thinking.bean.Users">
		update users
		<set>
			<if test="username != null">
				UserName = #{userName,jdbcType=VARCHAR},
			</if>
			<if test="realname != null">
				RealName = #{realName,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				Password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				Gender = #{gender,jdbcType=VARCHAR},
			</if>
			<if test="tel != null">
				Tel = #{tel,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				Email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="createdate != null">
				CreateDate = #{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="logincount != null">
				LoginCount = #{loginCount,jdbcType=VARCHAR},
			</if>
			<if test="isdeleted != null">
				IsDeleted = #{isDeleted,jdbcType=VARCHAR},
			</if>
			<if test="charactertype != null">
				CharacterType = #{characterType,jdbcType=INTEGER},
			</if>
			<if test="departid != null">
				DepartID = #{departId,jdbcType=INTEGER},
			</if>
		</set>
		where UserID = #{userId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.thinking.bean.Users">
		update users
		set
		UserName = #{userName,jdbcType=VARCHAR},
		RealName
		=#{realName,jdbcType=VARCHAR},
		Password = #{password,jdbcType=VARCHAR},
		Gender = #{gender,jdbcType=VARCHAR},
		Tel = #{tel,jdbcType=VARCHAR},
		Email = #{email,jdbcType=VARCHAR},
		CreateDate
		=#{createDate,jdbcType=TIMESTAMP},
		LoginCount
		=#{loginCount,jdbcType=VARCHAR},
		IsDeleted
		=#{isDeleted,jdbcType=VARCHAR},
		CharacterType
		=#{characterType,jdbcType=INTEGER},
		DepartID
		=#{departId,jdbcType=INTEGER}
		where UserID = #{userId,jdbcType=INTEGER}
	</update>
</mapper>